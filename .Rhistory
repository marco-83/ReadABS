packages <- c("reticulate")
for (i in packages) {
if(!(i %in% rownames(installed.packages()))) {
install.packages(i) }
library(i, character.only = TRUE)
}
Imports:
reticulate
source_python("import_xls.py")
source_python("ABStable.py")
source_python("create_df_xls.py")
#' Tidy an xls file
#'
#' This function cleans ABS xls files
#'
#' @param xl_workbook Path to the input file
#' @param allowed_blank_rows Number of blank rows between tables, defaults to 1
#' @param spreadsheet_type Spreadsheet type. Options are Time series, Data cube, Census
#' @return A list containing the cleaned data and information about the cleaned data
#' @export
ABS_xls < function(xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube") {
xl_workbook <-  import_xls(xl_workbook)
output <- main_xls(excel_workbook=xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube")
return(output)
}
ABS_xls < function(xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube") {
xl_workbook <-  import_xls(xl_workbook)
output <- main_xls(excel_workbook=xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube")
return(output)
}
ABS_xls <- function(xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube") {
xl_workbook <-  import_xls(xl_workbook)
output <- main_xls(excel_workbook=xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube")
return(output)
}
#' Tidy an xls file
#'
#' This function cleans ABS xls files
#'
#' @param xl_workbook Path to the input file
#' @param allowed_blank_rows Number of blank rows between tables, defaults to 1
#' @param spreadsheet_type Spreadsheet type. Options are Time series, Data cube, Census
#' @return A list containing the cleaned data and information about the cleaned data
#' @export
ABS_xls <- function(xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube") {
xl_workbook <-  import_xls(xl_workbook)
output <- main_xls(excel_workbook=xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube")
return(output)
}
devtools::document()
devtools::document()
devtools::document()
#' Tidy an xls file
#'
#' This function cleans ABS xls files
#'
#' @param xl_workbook Path to the input file
#' @param allowed_blank_rows Number of blank rows between tables, defaults to 1
#' @param spreadsheet_type Spreadsheet type. Options are Time series, Data cube, Census
#' @return A list containing the cleaned data and information about the cleaned data
#' @export
ABS_xls <- function(xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube") {
xl_workbook <- import_xls(xl_workbook)
output <- main_xls(excel_workbook=xl_workbook, allowed_blank_rows=1,
spreadsheet_type="Data cube")
output
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
vignette("python_dependencies")
devtools::document()
vignette("python_dependencies")
vignette("python_dependencies")
vignette("python_dependencies")
vignette("python_dependencies")
vignette("python_dependencies")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
py_discover_config()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::document()
devtools::document()
?source_python
devtools::document()
install.packages(c("backports", "BH", "broom", "cli", "covr", "crosstalk", "dbplyr", "devtools", "digest", "dplyr", "DT", "fansi", "farver", "forcats", "future", "ggplot2", "ggpubr", "ggrepel", "ggridges", "glue", "gridSVG", "hms", "igraph", "insight", "lifecycle", "lme4", "lubridate", "matrixStats", "mice", "mime", "modelr", "nloptr", "openxlsx", "pillar", "plotly", "plyr", "prettyunits", "ps", "purrr", "Rcpp", "RCurl", "remotes", "rgeos", "rlang", "rmarkdown", "shiny", "shinyWidgets", "sjlabelled", "sjmisc", "spatstat", "spatstat.utils", "stringi", "survey", "testthat", "tibble", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "XML", "xml2"))
install.packages(c("backports", "BH", "broom", "cli", "covr", "crosstalk", "dbplyr", "devtools", "digest", "dplyr", "DT", "fansi", "farver", "forcats", "future", "ggplot2", "ggpubr", "ggrepel", "ggridges", "glue", "gridSVG", "hms", "igraph", "insight", "lifecycle", "lme4", "lubridate", "matrixStats", "mice", "mime", "modelr", "nloptr", "openxlsx", "pillar", "plotly", "plyr", "prettyunits", "ps", "purrr", "Rcpp", "RCurl", "remotes", "rgeos", "rlang", "rmarkdown", "shiny", "shinyWidgets", "sjlabelled", "sjmisc", "spatstat", "spatstat.utils", "stringi", "survey", "testthat", "tibble", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "XML", "xml2"))
devtools::document()
install.packages("devtools")
install.packages("devtools")
remove.packages("reticulate")
install_github("kevinushey/reticulate")
library(devtools)
install_github("kevinushey/reticulate")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
remove.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?import_from_path
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?py_module_available
py_module_available("itertools")
reticulate::py_module_available("itertools")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
?ABS_xls
ABS_xls("81550do005_201718.xls", allowed_blank_rows = 1, spreadsheet_type = "Data cube")
reticulate::source_python("import_xls.py")
devtools::document()
devtools::document()
?import_from_path
?system.file
devtools::document()
devtools::document()
devtools::document()
evtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
?ReadABS
library(ReadABS)
?ReadABS
ABS_xls(xl_workbook = "81550do005_201718.xls")
?source_python
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
#devtools::install()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
module3 <- reticulate::import_from_path(
"ABStable",
system.file("python", package = "<mypackage>")
)
module3
for (obj in names(module3)) {
print(obj)
}
?import_from_path
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?configure_environment
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
module3 <- reticulate::import_from_path(
"ABStable",
file.path("inst", "python")
)
for (obj in names(module3)) {
assign(obj, NULL)
}
# Clean up
rm(module3)
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
?assignInMyNamespace
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
for (obj in names(module3)) { print(obj) }
module3 <- reticulate::import_from_path(
"ABStable",
system.file("python", package = packageName())
)
module3 <- reticulate::import_from_path(
"ABStable",
system.file("python", package = "<mypackage>")
)
devtools::document()
for (obj in names(module3)) { print(obj) }
names(module3)
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
?assignInMyNamespace
?import_from_path
devtools::document()
devtools::install()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
devtools::install()
devtools::document()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
rm(list=ls())
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
library(reticulate)
devtools::document()
devtools::install()
?namespace:reticulate
?namespaceExport
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::document()
names(create_df_xls)
create_df_xls <- reticulate::import_from_path(module = "create_df_xls",
path = system.file("python",
package = packageName()))
names(create_df_xls)
devtools::document()
devtools::install()
library(ReadABS)
BS_xls(xl_workbook = "81550do005_201718.xls")
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
reticulate::py_install("copy")
?py_install
:py_install("copy", pip = TRUE)
py_install("copy", pip = TRUE)
reticulate::py_install("copy", pip = TRUE)
strsplit("81550do005_201718.xls", split="\\.")[[1]]
strsplit("81550do005_201718.xls", split="\\.")
strsplit("81550do005_201718.xls", split="\\.")[[1]][-1]
devtools::document()
devtools::document()
devtools::install()
ABS_xls(xl_workbook = "81550do005_201718.xls")
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
ABS_xls(xl_workbook = '81550do005_201718.xls')
ABS_xls(xl_workbook = `81550do005_201718.xls`)
devtools::document()
devtools::document()
devtools::install()
library(ReadABS)
ABS_xls(xl_workbook = "81550do005_201718.xls")
